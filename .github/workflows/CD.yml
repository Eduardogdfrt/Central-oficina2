name: CI/CD

on:
  push:
    branches:
      - main
      - dev
      - 'feature/*'  
  pull_request:
    branches:
      - main
      - dev
      - 'feature/*'  

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:latest
        container_name: my-mssql
        restart: always
        environment:
          - ACCEPT_EULA=Y
          - MSSQL_PID=Express
          - MSSQL_DATABASE=batata
          - SA_PASSWORD=batata123
        ports:
          - '1433:1433'
        volumes:
          - mssql-volume:/var/opt/mssql
          - ./db/backup_ellp.sql:/docker-entrypoint-initdb.d/backup_ellp.sql
        networks:
          - app_network

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up .NET SDK 8
      - name: Set up .NET 8 SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      # Restore .NET dependencies
      - name: Restore dependencies
        working-directory: ./Back
        run: dotnet restore ./OficinaELLP.sln

      # Build the .NET application
      - name: Build .NET application
        working-directory: ./Back
        run: dotnet build --configuration Release ./OficinaELLP.sln

      # Run database migrations or seed data
      - name: Run database migrations
        run: |
          docker exec my-mssql sh -c 'exec sqlcmd -S localhost -U sa -P "batata123" -d batata -i /docker-entrypoint-initdb.d/backup_ellp.sql'

      # Publish the .NET application
      - name: Publish .NET application
        working-directory: ./Back
        run: dotnet publish --configuration Release --output ./publish ./OficinaELLP.sln

      # Build Docker image for web API
      - name: Build Docker image
        run: docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/webapi:latest ./Back

      # Push Docker image to Google Container Registry
      - name: Push Docker image to Google Container Registry
        env:
          MYSQL_CONNECTION_STRING: ${{ secrets.MYSQL_CONNECTION_STRING }}
        run: |
          echo "${{ secrets.GCP_SA_KEY }}" | gcloud auth activate-service-account --key-file=-
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
          gcloud auth configure-docker
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/webapi:latest

      # Deploy to Google Cloud Run
      - name: Deploy to Google Cloud Run
        env:
          MYSQL_CONNECTION_STRING: ${{ secrets.MYSQL_CONNECTION_STRING }}
        run: |
          echo "${{ secrets.GCP_SA_KEY }}" | gcloud auth activate-service-account --key-file=-
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
          gcloud run deploy webapi --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/webapi:latest --platform managed --region us-central1 --set-env-vars MYSQL_CONNECTION_STRING=${{ secrets.MYSQL_CONNECTION_STRING }} --allow-unauthenticated

volumes:
  mssql-volume: {}

networks:
  app_network:
    driver: bridge
